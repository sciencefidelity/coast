---
import format from "date-fns/format"
import { toHTML } from "@portabletext/to-html"
import sanityClient from "lib/sanityClient"
import { kebabCase, portableTextComponents } from "lib/utils"
import BaseLayout from "layouts/BaseLayout.astro"
import { posts } from "lib/queries"
import { Post } from "lib/interfaces"

export async function getStaticPaths() {
  const data: { posts: Post[] } = await sanityClient
    .fetch(posts)
    .then(response => response)
  return data.posts.map(post => {
    return {
      params: { slug: post.settings.slug },
      props: { post }
    }
  })
}

const { slug } = Astro.params
const { post } = Astro.props as { post: Post }
// const {
//   author,
//   body,
//   categories,
//   keywords,
//   next,
//   previous,
//   publishedAt,
//   seoDescription,
//   seoImage,
//   seoTitle,
//   title
// } = post
const date = format(new Date(post.settings.publishedAt), "eeee, do MMMM yyyy")
// const tags = keywords.split(", ")
---
<BaseLayout
  post={post}
>
  <div>
    <h1>{post.title}</h1>
    <p>published on: {date}</p>
    <p>by:
      <a href={`/authors/${post.settings.authors[0].slug}`}>
        {post.settings.authors[0].name}
      </a>
    </p>
    <ul>
      in: {post.settings.tags.map(tag =>
        <li><a href={`/category/${tag.slug}`}>{tag.title}</a></li>
      )}
    </ul>
    <div
      set:html={post.body && toHTML(post.body, {components: portableTextComponents})}
    />
    <!-- {previous
      ? <p><a href={`/blog/${previous.slug}`}>Previous post</a></p>
      : <p>&nbsp;</p>}
    {next
      ? <p><a href={`/blog/${next.slug}`}>Next post</a></p>
      : <p>&nbsp;</p>} -->
  </div>
</BaseLayout>

<style lang="scss">
li {
  display: inline;
  &:not(:last-child)::after {
    content: ', ';
  }
}
</style>
